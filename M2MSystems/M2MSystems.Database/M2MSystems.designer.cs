#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace M2MSystems.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="M2MSystems")]
	public partial class M2MSystemsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertApplicant(Applicant instance);
    partial void UpdateApplicant(Applicant instance);
    partial void DeleteApplicant(Applicant instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertForm(Form instance);
    partial void UpdateForm(Form instance);
    partial void DeleteForm(Form instance);
    partial void InsertInsurerPartnerProduct(InsurerPartnerProduct instance);
    partial void UpdateInsurerPartnerProduct(InsurerPartnerProduct instance);
    partial void DeleteInsurerPartnerProduct(InsurerPartnerProduct instance);
    partial void InsertInsurerPartner(InsurerPartner instance);
    partial void UpdateInsurerPartner(InsurerPartner instance);
    partial void DeleteInsurerPartner(InsurerPartner instance);
    partial void InsertInsurer(Insurer instance);
    partial void UpdateInsurer(Insurer instance);
    partial void DeleteInsurer(Insurer instance);
    partial void InsertPartner(Partner instance);
    partial void UpdatePartner(Partner instance);
    partial void DeletePartner(Partner instance);
    partial void InsertPolicy(Policy instance);
    partial void UpdatePolicy(Policy instance);
    partial void DeletePolicy(Policy instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSavedForm(SavedForm instance);
    partial void UpdateSavedForm(SavedForm instance);
    partial void DeleteSavedForm(SavedForm instance);
    #endregion
		
		public M2MSystemsDataContext() : 
				base("Data Source=.;Initial Catalog=M2MSystems;Integrated Security=True", mappingSource)
		{
			OnCreated();
		}
		
		public M2MSystemsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public M2MSystemsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public M2MSystemsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public M2MSystemsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Applicant> Applicants
		{
			get
			{
				return this.GetTable<Applicant>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Form> Forms
		{
			get
			{
				return this.GetTable<Form>();
			}
		}
		
		public System.Data.Linq.Table<InsurerPartnerProduct> InsurerPartnerProducts
		{
			get
			{
				return this.GetTable<InsurerPartnerProduct>();
			}
		}
		
		public System.Data.Linq.Table<InsurerPartner> InsurerPartners
		{
			get
			{
				return this.GetTable<InsurerPartner>();
			}
		}
		
		public System.Data.Linq.Table<Insurer> Insurers
		{
			get
			{
				return this.GetTable<Insurer>();
			}
		}
		
		public System.Data.Linq.Table<Partner> Partners
		{
			get
			{
				return this.GetTable<Partner>();
			}
		}
		
		public System.Data.Linq.Table<Policy> Policies
		{
			get
			{
				return this.GetTable<Policy>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<SavedForm> SavedForms
		{
			get
			{
				return this.GetTable<SavedForm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applicants")]
	public partial class Applicant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _firstname;
		
		private string _lastname;
		
		private string _address1;
		
		private string _address2;
		
		private string _city;
		
		private string _thirdpartykey;
		
		private string _email;
		
		private EntitySet<SavedForm> _SavedForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnlastnameChanging(string value);
    partial void OnlastnameChanged();
    partial void Onaddress1Changing(string value);
    partial void Onaddress1Changed();
    partial void Onaddress2Changing(string value);
    partial void Onaddress2Changed();
    partial void OncityChanging(string value);
    partial void OncityChanged();
    partial void OnthirdpartykeyChanging(string value);
    partial void OnthirdpartykeyChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Applicant()
		{
			this._SavedForms = new EntitySet<SavedForm>(new Action<SavedForm>(this.attach_SavedForms), new Action<SavedForm>(this.detach_SavedForms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="NVarChar(50)")]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastname", DbType="NVarChar(50)")]
		public string lastname
		{
			get
			{
				return this._lastname;
			}
			set
			{
				if ((this._lastname != value))
				{
					this.OnlastnameChanging(value);
					this.SendPropertyChanging();
					this._lastname = value;
					this.SendPropertyChanged("lastname");
					this.OnlastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address1", DbType="NVarChar(50)")]
		public string address1
		{
			get
			{
				return this._address1;
			}
			set
			{
				if ((this._address1 != value))
				{
					this.Onaddress1Changing(value);
					this.SendPropertyChanging();
					this._address1 = value;
					this.SendPropertyChanged("address1");
					this.Onaddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address2", DbType="NVarChar(50)")]
		public string address2
		{
			get
			{
				return this._address2;
			}
			set
			{
				if ((this._address2 != value))
				{
					this.Onaddress2Changing(value);
					this.SendPropertyChanging();
					this._address2 = value;
					this.SendPropertyChanged("address2");
					this.Onaddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="NVarChar(50)")]
		public string city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thirdpartykey", DbType="NVarChar(50)")]
		public string thirdpartykey
		{
			get
			{
				return this._thirdpartykey;
			}
			set
			{
				if ((this._thirdpartykey != value))
				{
					this.OnthirdpartykeyChanging(value);
					this.SendPropertyChanging();
					this._thirdpartykey = value;
					this.SendPropertyChanged("thirdpartykey");
					this.OnthirdpartykeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_SavedForm", Storage="_SavedForms", ThisKey="id", OtherKey="applicantid")]
		public EntitySet<SavedForm> SavedForms
		{
			get
			{
				return this._SavedForms;
			}
			set
			{
				this._SavedForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SavedForms(SavedForm entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = this;
		}
		
		private void detach_SavedForms(SavedForm entity)
		{
			this.SendPropertyChanging();
			entity.Applicant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private byte[] _url;
		
		private EntityRef<Policy> _Policy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnbinChanging(byte[] value);
    partial void OnbinChanged();
    #endregion
		
		public Document()
		{
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VARBINARY(MAX)", CanBeNull=false)]
		public byte[] bin
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnbinChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("bin");
					this.OnbinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Document", Storage="_Policy", ThisKey="id", OtherKey="documentid", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._id = value.documentid;
					}
					else
					{
						this._id = default(long);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forms")]
	public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _productid;
		
		private string _title;
		
		private string _datamapper;
		
		private string _validator;
		
		private string _feecalculator;
		
		private string _url;
		
		private EntitySet<SavedForm> _SavedForms;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnproductidChanging(long value);
    partial void OnproductidChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnapplicationextractorChanging(string value);
    partial void OnapplicationextractorChanged();
    partial void OnvalidatorChanging(string value);
    partial void OnvalidatorChanged();
    partial void OnfeecalculatorChanging(string value);
    partial void OnfeecalculatorChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public Form()
		{
			this._SavedForms = new EntitySet<SavedForm>(new Action<SavedForm>(this.attach_SavedForms), new Action<SavedForm>(this.detach_SavedForms));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productid", DbType="BigInt NOT NULL")]
		public long productid
		{
			get
			{
				return this._productid;
			}
			set
			{
				if ((this._productid != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductidChanging(value);
					this.SendPropertyChanging();
					this._productid = value;
					this.SendPropertyChanged("productid");
					this.OnproductidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datamapper", DbType="varchar(50)", CanBeNull=false)]
		public string applicationextractor
		{
			get
			{
				return this._datamapper;
			}
			set
			{
				if ((this._datamapper != value))
				{
					this.OnapplicationextractorChanging(value);
					this.SendPropertyChanging();
					this._datamapper = value;
					this.SendPropertyChanged("applicationextractor");
					this.OnapplicationextractorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_validator", DbType="varchar(50)", CanBeNull=false)]
		public string validator
		{
			get
			{
				return this._validator;
			}
			set
			{
				if ((this._validator != value))
				{
					this.OnvalidatorChanging(value);
					this.SendPropertyChanging();
					this._validator = value;
					this.SendPropertyChanged("validator");
					this.OnvalidatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_feecalculator", DbType="varchar(50)", CanBeNull=false)]
		public string feecalculator
		{
			get
			{
				return this._feecalculator;
			}
			set
			{
				if ((this._feecalculator != value))
				{
					this.OnfeecalculatorChanging(value);
					this.SendPropertyChanging();
					this._feecalculator = value;
					this.SendPropertyChanged("feecalculator");
					this.OnfeecalculatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="varchar(200)", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_SavedForm", Storage="_SavedForms", ThisKey="id", OtherKey="formid")]
		public EntitySet<SavedForm> SavedForms
		{
			get
			{
				return this._SavedForms;
			}
			set
			{
				this._SavedForms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Form", Storage="_Product", ThisKey="productid", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Forms.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Forms.Add(this);
						this._productid = value.id;
					}
					else
					{
						this._productid = default(long);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SavedForms(SavedForm entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_SavedForms(SavedForm entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsurerPartnerProducts")]
	public partial class InsurerPartnerProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _insurerpartnerid;
		
		private long _productid;
		
		private decimal _commissionrate;
		
		private EntityRef<InsurerPartner> _InsurerPartner;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OninsurerpartneridChanging(long value);
    partial void OninsurerpartneridChanged();
    partial void OnproductidChanging(long value);
    partial void OnproductidChanged();
    partial void OncommissionrateChanging(decimal value);
    partial void OncommissionrateChanged();
    #endregion
		
		public InsurerPartnerProduct()
		{
			this._InsurerPartner = default(EntityRef<InsurerPartner>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_insurerpartnerid", DbType="BigInt NOT NULL")]
		public long insurerpartnerid
		{
			get
			{
				return this._insurerpartnerid;
			}
			set
			{
				if ((this._insurerpartnerid != value))
				{
					if (this._InsurerPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninsurerpartneridChanging(value);
					this.SendPropertyChanging();
					this._insurerpartnerid = value;
					this.SendPropertyChanged("insurerpartnerid");
					this.OninsurerpartneridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productid", DbType="BigInt NOT NULL")]
		public long productid
		{
			get
			{
				return this._productid;
			}
			set
			{
				if ((this._productid != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductidChanging(value);
					this.SendPropertyChanging();
					this._productid = value;
					this.SendPropertyChanged("productid");
					this.OnproductidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commissionrate", DbType="Decimal(18,6)")]
		public decimal commissionrate
		{
			get
			{
				return this._commissionrate;
			}
			set
			{
				if ((this._commissionrate != value))
				{
					this.OncommissionrateChanging(value);
					this.SendPropertyChanging();
					this._commissionrate = value;
					this.SendPropertyChanged("commissionrate");
					this.OncommissionrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsurerPartner_InsurerPartnerProduct", Storage="_InsurerPartner", ThisKey="insurerpartnerid", OtherKey="id", IsForeignKey=true)]
		public InsurerPartner InsurerPartner
		{
			get
			{
				return this._InsurerPartner.Entity;
			}
			set
			{
				InsurerPartner previousValue = this._InsurerPartner.Entity;
				if (((previousValue != value) 
							|| (this._InsurerPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InsurerPartner.Entity = null;
						previousValue.InsurerPartnerProducts.Remove(this);
					}
					this._InsurerPartner.Entity = value;
					if ((value != null))
					{
						value.InsurerPartnerProducts.Add(this);
						this._insurerpartnerid = value.id;
					}
					else
					{
						this._insurerpartnerid = default(long);
					}
					this.SendPropertyChanged("InsurerPartner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InsurerPartnerProduct", Storage="_Product", ThisKey="productid", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InsurerPartnerProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InsurerPartnerProducts.Add(this);
						this._productid = value.id;
					}
					else
					{
						this._productid = default(long);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsurerPartners")]
	public partial class InsurerPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _insurerid;
		
		private long _partnerid;
		
		private decimal _commissionrate;
		
		private EntitySet<InsurerPartnerProduct> _InsurerPartnerProducts;
		
		private EntityRef<Insurer> _Insurer;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OninsureridChanging(long value);
    partial void OninsureridChanged();
    partial void OnpartneridChanging(long value);
    partial void OnpartneridChanged();
    partial void OncommissionrateChanging(decimal value);
    partial void OncommissionrateChanged();
    #endregion
		
		public InsurerPartner()
		{
			this._InsurerPartnerProducts = new EntitySet<InsurerPartnerProduct>(new Action<InsurerPartnerProduct>(this.attach_InsurerPartnerProducts), new Action<InsurerPartnerProduct>(this.detach_InsurerPartnerProducts));
			this._Insurer = default(EntityRef<Insurer>);
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_insurerid", DbType="BigInt NOT NULL")]
		public long insurerid
		{
			get
			{
				return this._insurerid;
			}
			set
			{
				if ((this._insurerid != value))
				{
					if (this._Insurer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OninsureridChanging(value);
					this.SendPropertyChanging();
					this._insurerid = value;
					this.SendPropertyChanged("insurerid");
					this.OninsureridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_partnerid", DbType="BigInt NOT NULL")]
		public long partnerid
		{
			get
			{
				return this._partnerid;
			}
			set
			{
				if ((this._partnerid != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpartneridChanging(value);
					this.SendPropertyChanging();
					this._partnerid = value;
					this.SendPropertyChanged("partnerid");
					this.OnpartneridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_commissionrate", DbType="Decimal(18,6) NOT NULL")]
		public decimal commissionrate
		{
			get
			{
				return this._commissionrate;
			}
			set
			{
				if ((this._commissionrate != value))
				{
					this.OncommissionrateChanging(value);
					this.SendPropertyChanging();
					this._commissionrate = value;
					this.SendPropertyChanged("commissionrate");
					this.OncommissionrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InsurerPartner_InsurerPartnerProduct", Storage="_InsurerPartnerProducts", ThisKey="id", OtherKey="insurerpartnerid")]
		public EntitySet<InsurerPartnerProduct> InsurerPartnerProducts
		{
			get
			{
				return this._InsurerPartnerProducts;
			}
			set
			{
				this._InsurerPartnerProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurer_InsurerPartner", Storage="_Insurer", ThisKey="insurerid", OtherKey="id", IsForeignKey=true)]
		public Insurer Insurer
		{
			get
			{
				return this._Insurer.Entity;
			}
			set
			{
				Insurer previousValue = this._Insurer.Entity;
				if (((previousValue != value) 
							|| (this._Insurer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Insurer.Entity = null;
						previousValue.InsurerPartners.Remove(this);
					}
					this._Insurer.Entity = value;
					if ((value != null))
					{
						value.InsurerPartners.Add(this);
						this._insurerid = value.id;
					}
					else
					{
						this._insurerid = default(long);
					}
					this.SendPropertyChanged("Insurer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partner_InsurerPartner", Storage="_Partner", ThisKey="partnerid", OtherKey="id", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.InsurerPartners.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.InsurerPartners.Add(this);
						this._partnerid = value.id;
					}
					else
					{
						this._partnerid = default(long);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurerPartnerProducts(InsurerPartnerProduct entity)
		{
			this.SendPropertyChanging();
			entity.InsurerPartner = this;
		}
		
		private void detach_InsurerPartnerProducts(InsurerPartnerProduct entity)
		{
			this.SendPropertyChanging();
			entity.InsurerPartner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Insurers")]
	public partial class Insurer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private EntitySet<InsurerPartner> _InsurerPartners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Insurer()
		{
			this._InsurerPartners = new EntitySet<InsurerPartner>(new Action<InsurerPartner>(this.attach_InsurerPartners), new Action<InsurerPartner>(this.detach_InsurerPartners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Insurer_InsurerPartner", Storage="_InsurerPartners", ThisKey="id", OtherKey="insurerid")]
		public EntitySet<InsurerPartner> InsurerPartners
		{
			get
			{
				return this._InsurerPartners;
			}
			set
			{
				this._InsurerPartners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurerPartners(InsurerPartner entity)
		{
			this.SendPropertyChanging();
			entity.Insurer = this;
		}
		
		private void detach_InsurerPartners(InsurerPartner entity)
		{
			this.SendPropertyChanging();
			entity.Insurer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partners")]
	public partial class Partner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private decimal _rate;
		
		private string _name;
		
		private EntitySet<InsurerPartner> _InsurerPartners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnrateChanging(decimal value);
    partial void OnrateChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Partner()
		{
			this._InsurerPartners = new EntitySet<InsurerPartner>(new Action<InsurerPartner>(this.attach_InsurerPartners), new Action<InsurerPartner>(this.detach_InsurerPartners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Decimal(18,6)")]
		public decimal rate
		{
			get
			{
				return this._rate;
			}
			set
			{
				if ((this._rate != value))
				{
					this.OnrateChanging(value);
					this.SendPropertyChanging();
					this._rate = value;
					this.SendPropertyChanged("rate");
					this.OnrateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Partner_InsurerPartner", Storage="_InsurerPartners", ThisKey="id", OtherKey="partnerid")]
		public EntitySet<InsurerPartner> InsurerPartners
		{
			get
			{
				return this._InsurerPartners;
			}
			set
			{
				this._InsurerPartners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InsurerPartners(InsurerPartner entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_InsurerPartners(InsurerPartner entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Policies")]
	public partial class Policy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _productid;
		
		private long _documentid;
		
		private System.DateTimeOffset _startdate;
		
		private System.DateTimeOffset _enddate;
		
		private decimal _cost;
		
		private EntitySet<Document> _Documents;
		
		private EntityRef<Product> _Product;
		
		private EntitySet<SavedForm> _SavedForms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnproductidChanging(long value);
    partial void OnproductidChanged();
    partial void OndocumentidChanging(long value);
    partial void OndocumentidChanged();
    partial void OnstartdateChanging(System.DateTimeOffset value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.DateTimeOffset value);
    partial void OnenddateChanged();
    partial void OncostChanging(decimal value);
    partial void OncostChanged();
    #endregion
		
		public Policy()
		{
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Product = default(EntityRef<Product>);
			this._SavedForms = new EntitySet<SavedForm>(new Action<SavedForm>(this.attach_SavedForms), new Action<SavedForm>(this.detach_SavedForms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productid", DbType="BigInt NOT NULL")]
		public long productid
		{
			get
			{
				return this._productid;
			}
			set
			{
				if ((this._productid != value))
				{
					this.OnproductidChanging(value);
					this.SendPropertyChanging();
					this._productid = value;
					this.SendPropertyChanged("productid");
					this.OnproductidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_documentid", DbType="BigInt NOT NULL")]
		public long documentid
		{
			get
			{
				return this._documentid;
			}
			set
			{
				if ((this._documentid != value))
				{
					this.OndocumentidChanging(value);
					this.SendPropertyChanging();
					this._documentid = value;
					this.SendPropertyChanged("documentid");
					this.OndocumentidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Decimal(18,2) NOT NULL")]
		public decimal cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Document", Storage="_Documents", ThisKey="documentid", OtherKey="id")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Product", Storage="_Product", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Policy = null;
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Policy = this;
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SavedForm", Storage="_SavedForms", ThisKey="id", OtherKey="policyid")]
		public EntitySet<SavedForm> SavedForms
		{
			get
			{
				return this._SavedForms;
			}
			set
			{
				this._SavedForms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
		
		private void attach_SavedForms(SavedForm entity)
		{
			this.SendPropertyChanging();
			entity.Policy = this;
		}
		
		private void detach_SavedForms(SavedForm entity)
		{
			this.SendPropertyChanging();
			entity.Policy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private string _name;
		
		private EntitySet<Form> _Forms;
		
		private EntitySet<InsurerPartnerProduct> _InsurerPartnerProducts;
		
		private EntityRef<Policy> _Policy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Product()
		{
			this._Forms = new EntitySet<Form>(new Action<Form>(this.attach_Forms), new Action<Form>(this.detach_Forms));
			this._InsurerPartnerProducts = new EntitySet<InsurerPartnerProduct>(new Action<InsurerPartnerProduct>(this.attach_InsurerPartnerProducts), new Action<InsurerPartnerProduct>(this.detach_InsurerPartnerProducts));
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Form", Storage="_Forms", ThisKey="id", OtherKey="productid")]
		public EntitySet<Form> Forms
		{
			get
			{
				return this._Forms;
			}
			set
			{
				this._Forms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InsurerPartnerProduct", Storage="_InsurerPartnerProducts", ThisKey="id", OtherKey="productid")]
		public EntitySet<InsurerPartnerProduct> InsurerPartnerProducts
		{
			get
			{
				return this._InsurerPartnerProducts;
			}
			set
			{
				this._InsurerPartnerProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_Product", Storage="_Policy", ThisKey="id", OtherKey="id", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.Product = null;
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.Product = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(long);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Forms(Form entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_InsurerPartnerProducts(InsurerPartnerProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InsurerPartnerProducts(InsurerPartnerProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SavedForms")]
	public partial class SavedForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id;
		
		private long _applicantid;
		
		private long _formid;
		
		private System.Nullable<long> _policyid;
		
		private string _answers;
		
		private EntityRef<Applicant> _Applicant;
		
		private EntityRef<Form> _Form;
		
		private EntityRef<Policy> _Policy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(long value);
    partial void OnidChanged();
    partial void OnapplicantidChanging(long value);
    partial void OnapplicantidChanged();
    partial void OnformidChanging(long value);
    partial void OnformidChanged();
    partial void OnpolicyidChanging(System.Nullable<long> value);
    partial void OnpolicyidChanged();
    partial void OnanswersChanging(string value);
    partial void OnanswersChanged();
    #endregion
		
		public SavedForm()
		{
			this._Applicant = default(EntityRef<Applicant>);
			this._Form = default(EntityRef<Form>);
			this._Policy = default(EntityRef<Policy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_applicantid", DbType="BigInt NOT NULL")]
		public long applicantid
		{
			get
			{
				return this._applicantid;
			}
			set
			{
				if ((this._applicantid != value))
				{
					if (this._Applicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnapplicantidChanging(value);
					this.SendPropertyChanging();
					this._applicantid = value;
					this.SendPropertyChanged("applicantid");
					this.OnapplicantidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_formid", DbType="BigInt NOT NULL")]
		public long formid
		{
			get
			{
				return this._formid;
			}
			set
			{
				if ((this._formid != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnformidChanging(value);
					this.SendPropertyChanging();
					this._formid = value;
					this.SendPropertyChanged("formid");
					this.OnformidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_policyid", DbType="BigInt")]
		public System.Nullable<long> policyid
		{
			get
			{
				return this._policyid;
			}
			set
			{
				if ((this._policyid != value))
				{
					if (this._Policy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpolicyidChanging(value);
					this.SendPropertyChanging();
					this._policyid = value;
					this.SendPropertyChanged("policyid");
					this.OnpolicyidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answers", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string answers
		{
			get
			{
				return this._answers;
			}
			set
			{
				if ((this._answers != value))
				{
					this.OnanswersChanging(value);
					this.SendPropertyChanging();
					this._answers = value;
					this.SendPropertyChanged("answers");
					this.OnanswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicant_SavedForm", Storage="_Applicant", ThisKey="applicantid", OtherKey="id", IsForeignKey=true)]
		public Applicant Applicant
		{
			get
			{
				return this._Applicant.Entity;
			}
			set
			{
				Applicant previousValue = this._Applicant.Entity;
				if (((previousValue != value) 
							|| (this._Applicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicant.Entity = null;
						previousValue.SavedForms.Remove(this);
					}
					this._Applicant.Entity = value;
					if ((value != null))
					{
						value.SavedForms.Add(this);
						this._applicantid = value.id;
					}
					else
					{
						this._applicantid = default(long);
					}
					this.SendPropertyChanged("Applicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Form_SavedForm", Storage="_Form", ThisKey="formid", OtherKey="id", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.SavedForms.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.SavedForms.Add(this);
						this._formid = value.id;
					}
					else
					{
						this._formid = default(long);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Policy_SavedForm", Storage="_Policy", ThisKey="policyid", OtherKey="id", IsForeignKey=true)]
		public Policy Policy
		{
			get
			{
				return this._Policy.Entity;
			}
			set
			{
				Policy previousValue = this._Policy.Entity;
				if (((previousValue != value) 
							|| (this._Policy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Policy.Entity = null;
						previousValue.SavedForms.Remove(this);
					}
					this._Policy.Entity = value;
					if ((value != null))
					{
						value.SavedForms.Add(this);
						this._policyid = value.id;
					}
					else
					{
						this._policyid = default(Nullable<long>);
					}
					this.SendPropertyChanged("Policy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
